@model aspnetPortfolio.dbContext.Project

@{
    ViewBag.Title = "Edit Project";
}

<h2>Edit Project</h2>

@using (Html.BeginForm("Edit", "Project", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Id)

    <div class="form-horizontal">
        <h4>Project</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GithubLink, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.GithubLink, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.GithubLink, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FilePath, "Upload File", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" name="file" class="form-control" />
                @Html.ValidationMessageFor(model => model.FilePath, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model=>model.Tags, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ListBox("selectedTags", (MultiSelectList)ViewBag.TagList, new { @class = "form-control" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<p>
    <strong>Delete Project</strong><br />
    Are you sure you want to delete the project "<strong>@Model.Name</strong>"? Please type the project name below to confirm.

    @using (Html.BeginForm("Delete", "Project", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.Id)
        
        <div class="form-group">
            <p>Confirm Project Name</p>
            <div class="col-md-10">
                <input type="text" name="confirmProjectName" class="form-control" />
                <span class="text-danger" id="confirmationError" style="display: none;">The project name does not match. Please type the correct name.</span>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Delete" class="btn btn-danger" id="deleteButton" disabled />
            </div>
        </div>
    }
</p>

@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            var projectName = '@Model.Name'; 
            var confirmInput = $("input[name='confirmProjectName']"); 
            var deleteButton = $("#deleteButton");  
            var errorMessage = $("#confirmationError");  


            confirmInput.on("input", function () {
                if (confirmInput.val() === projectName) {
                    deleteButton.prop("disabled", false);  
                    errorMessage.hide(); 
                } else {
                    deleteButton.prop("disabled", true);  
                    errorMessage.show();  
                }
            });
        });
    </script>
}

